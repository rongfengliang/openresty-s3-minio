worker_processes  1;
user root;  
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    lua_code_cache off;
    gzip  on;
    resolver 127.0.0.11 8.8.8.8 ipv6=off;          
    real_ip_header     X-Forwarded-For;
    real_ip_recursive on;
    lua_package_path '/opt/app/?.lua;;';
    upstream s3app {
        s3:9000;
    };
    server {
        listen       80;
        server_name  localhost;
        charset utf-8;
        root html;
        default_type text/html;
        location / {
           default_type text/html;
           index index.html;

        }
        location = /lua-resty-s3/proxy/ {
            internal;
            resolver 8.8.8.8 ipv6=off;          
            set_unescape_uri $my_host $arg_host;
            set_unescape_uri $my_uri $arg_uri;
            proxy_set_header User-Agent 'Mozilla/5.0 (X11; Linux x86_64; rv:16.0)';
            proxy_pass http://s3app$my_uri;
        }
        location /lua-resty-s3/upload/ {
            internal;
            set_unescape_uri $date $arg_date;
            set_unescape_uri $auth $arg_auth;
            set_unescape_uri $file $arg_file;
            set_unescape_uri $mime $arg_mime;
            proxy_pass_request_headers off;
            more_clear_headers 'Host';
            resolver 8.8.8.8 ipv6=off;          
            more_clear_headers 'Connection';
            more_clear_headers 'Content-Length';
            more_clear_headers 'User-Agent';
            more_clear_headers 'Accept';
            proxy_set_header Date $date;
            proxy_set_header Authorization $auth;
            proxy_set_header content-type $mime;
            proxy_set_header Content-MD5 '';
            proxy_pass http://s3app$file;
        }
        location /test {
          content_by_lua_block  {
            require("s3/init")()
          }
        }
        location /upper {
           default_type text/plain;
           content_by_lua_block {
              require("upper/init")();
           }
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}